//Importa√ß√£o de bibliotecas da API
import { ButtonInteraction, Collection, Message, MessageActionRow, MessageButton, User } from "discord.js";
//Importa√ß√£o da classe de defini√ß√£o do comando
import { Command } from "../../structures/Command";
//Importa√ß√£o da classe de defini√ß√£o da Interaction
import { ExtendedInteraction } from "../../typings/Command";


//Defini√ß√µes de contantes de texto (IN√çCIO)
//Emojis das m√£os
const HANDS: Array<string> = ["üëä","‚úåÔ∏è","üñê"];
//Texto de reply (substitui o painel de bot√µes, de pois da jogada)
const REPLY_TEXT: string = "Jo Ken P√¥";
//Texto para quando houver empate
const DRAW: string = "WoW! Empatamos!";
//Texto para quando o jogador vence
const USER_WINS: string = "Voc√™ ganhou";
//Texto para quando o jogador perde
const USER_LOOSES: string = "Voc√™ perdeu";
//Emoji para bot√£o de fechamento do painel
const CLOSE_EMOJI: string ='‚ùå';
//Texto para bot√£o de fechamento do painel
const CLOSE: string = 'Fechar';
//Match canceled
const CANCEL: string = '___';
const THRESHOLD: number = 60 * 60 * 1000;
//Defini√ß√µes de contantes de texto (FIM)



type ChannelMatch = {
    timestamp: number,
    interaction: Message
}

/**
 * Classe para jogo de Jokenp√¥.
 * 
 * O usu√°rio do Discord √© um jogador e o bot √© o outro, escolhendo, aleatoriamente, uma das tr√™s possibilidade.
 */
class Jokenpo{

    private channelMatches: Collection<string, ChannelMatch> = new Collection();

    private currentUser: User;

    /**
     * Construtor
     * @constructor
     */
    constructor(){
    }

    /**
     * Realiza o conjunto de jogadas para uma partida de jokenp√¥
     * @param interaction Intera√ß√£o que disparou a partida
     * @param comment Coment√°rio opcional a ser exibido antes da avalia√ß√£o da partida
     */
    public play(interaction: ExtendedInteraction, comment?: string){
        
        //Cria√ß√£o de painel 
        const row = new MessageActionRow()
            .addComponents(
                //Adi√ß√£o do bot√£o relativo a pedra
                new MessageButton()
                    .setCustomId('0')
                    .setEmoji(HANDS[0])
                    .setStyle('SECONDARY'),
                //Adi√ß√£o do bot√£o relativo a tesoura
                new MessageButton()
                    .setCustomId('1')
                    .setEmoji(HANDS[1])
                    .setStyle('SECONDARY'),
                //Adi√ß√£o do bot√£o relativo a tesoura
                new MessageButton()
                    .setCustomId('2')
                    .setEmoji(HANDS[2])
                    .setStyle('SECONDARY'),
                //Adi√ß√£o do bot√£o para fechar painel
                new MessageButton()
                    .setCustomId('3')
                    .setEmoji(CLOSE_EMOJI)
                    .setLabel(CLOSE)
                    .setStyle('SECONDARY'),
            );
        
        interaction.channel.send({content: '...', components: [row]})
            .then( msg => {
                //Recupera√ß√£o das informa√ß√µes do canal
                const match = this.channelMatches.get(interaction.channelId);
                //SE j√° houver alguma informa√ß√£o sobre o canal, o painel anterior deve ser exclu√≠do
                if(match && match.interaction){
                    this.deleteMessage(interaction.channelId);
                }
                //Atualiza as informa√ß√µes do canal, indicando que o painel ativo √© o que acabou de ser criado
                this.updateChannel(interaction.channelId, msg);
            })
            .catch(  
                //Se houver algum erro, ele √© direcionado ao console
                console.error
            );

        const filter = (finteraction ) => {
            this.currentUser = finteraction.user;

            //Pode haver v√°rios coletores simultaneamente no canal, ent√£o √© necess√°rio fazder a filtragem se
            //a intera√ß√£o que est√° atuando √© a mesma intera√ß√£o que deu origem a esse painel
            return finteraction.message == this.channelMatches.get(finteraction.channelId).interaction;
        };

        //Cria um coletor de intera√ß√µes para interageir com o painel
        const collector = interaction.channel.createMessageComponentCollector({
            filter,
            max: 1
        });

        //Vindula o evento de intera√ß√£o com o painel e o coletor de intera√ß√µes
        collector.on('end', async (ButtonInteraction)=>{
            
            ButtonInteraction.first().deferUpdate();
            //Transforma o CustomID do bot√£o clicado na escolha do jogador
            const userHand: number = parseInt(ButtonInteraction.first().customId);

            //Se o usu√°rio escolher a op√ß√£o de fechar, o painel √© exclu√≠do e nada mais ser√° feito
            if(userHand==3){
                const match = this.channelMatches.get(interaction.channelId);
                if(match && match.interaction){
                    match.interaction.delete();
                }
                // //Exclus√£o da mensagem contendo o painel
                this.channelMatches.delete(interaction.channelId);
                //Edi√ß√£o do reply, para evitar mensagem de que o bot ainda est√° processando
                interaction.editReply({content: CANCEL});
                
                return;
            }

            //Ecolhe aleatoriamente a jogada do bot (A multiplica√ß√£o de Math.random por Date.now pode deixar o resultadao mais eleat√≥ria)
            const botHand: number = Math.floor(Math.random()*Date.now())%3;
            //Recupera o texto da avalia√ß√£o da partida
            const result = this.conditions(userHand,botHand);
            
            //Faz um reply para evitar as retic√™ncias, como se o bot ainda estivesse agindo
            interaction.editReply({content: REPLY_TEXT});
            //Defini√ß√£o da vari√°vel com o texto a ser exibido com o resultado
            let ret: string = '';
            //Define o texto a ser exibido

            

            ret = `*-${(comment)?(comment):('')}*\n${this.currentUser} escolheu ${HANDS[userHand]}\n`+
                `Eu escolhi ${HANDS[botHand]}\n**${(result==-1)?(USER_LOOSES):((result==0)?(DRAW):(USER_WINS))}**`;
            //Publica o resultado
            interaction.channel.send({content: ret});

            //Exibi√ß√£o de um novo painel
            this.play(interaction);
        });
    }


    /**
     * Exclui uma mensagem que contenha um painel
     * @param matchID ID do canal
     */
    private deleteMessage(matchID:string){
        //As informa√ß√µes do canal s√£o recuperadas
        const match = this.channelMatches.get(matchID);
        //A mensagem √© exclu√≠da
        match.interaction.delete();
        //O canal √© atualziado
        this.updateChannel(matchID, undefined);
    }

    /**
     * Valida todos os canais no bot. Se algum canal apresenta inatividade por um tempo superior a THRESHOLD, ele √© exclu√≠do
     */
    private validateChannels(){
        this.channelMatches.forEach( (value, key) =>{
            if(Date.now() - value.timestamp > THRESHOLD){
                this.channelMatches.delete(key);
            }
        });
    }

    /**
     * Atualiza os dados de uma partida
     * @param matchID Identificador do canal da partida
     * @param interaction Par√¢metro opcional para identificar uma intera√ß√£o que exibiu um painel
     */
    private updateChannel(matchID: string, interaction?: Message){
        //Recupera√ß√£o de uma partida
        const match = this.channelMatches.get(matchID);
        //Se nenhuma partida foi encontrada...
        if(!match){
            //Ela √© criada
            this.channelMatches.set(matchID,{timestamp: Date.now(), interaction: interaction});
        }else{
            //Caso contr√°rio, os dados s√£o atualizados
            match.timestamp = Date.now();
            match.interaction = interaction;
            this.channelMatches.set(matchID, match);
        }
        //Valida√ß√£o de todos os canais registrados no bot
        this.validateChannels();

    }

    /**
     * Faz a avalia√ß√£o de quem ganho a jogada.
     * @param userHand Escolha do usu√°rio
     * @param botHand Escolha do bot
     * @returns Avalia√ß√£o de quem ganho (-1 se o bot ganhar, 0 se houver empate e 1 se o usu√°rio ganhar)
     */
    private conditions( userHand: number, botHand: number): number{
        //Avalia√ß√£o se foi empate
        if(userHand == botHand){
            return 0;
        }
        //Avalia√ß√£o do resultado se o jogador escolheu pedra
        if(userHand==0){
            return (botHand==1)?(1):(-1);
        //Avalia√ß√£o do resultado se o jogador escolheu tesoura
        }else if(userHand==1){
            return (botHand==0)?(-1):(1);
        //Avalia√ß√£o do resultado se o jogador escolheu papel
        }else if(userHand==2){
            return (botHand==0)?(1):(-1);
        }
    }
  
}

/**
 * Objeto com comando para exibi√ß√£o do painel para partidas de jokenp√¥
 */
export default new Command({
    name: 'j',
    description: 'Faz uma disputa de Jokenp√¥',
    help: '*JOGAR JOKENP√î*\n'+
    '**/j**: D√° in√≠cio a uma partida de Jokenp√¥.\nBasta clicar nos bot√µes relativos a sua op√ß√£o'+
    ' (pedra, papel ou tesoura) no painel que aparece.\nSe quiser fechar o painel, basta clicar no bot√£o Fechar.\n'+
    'Opcionamente, pode-se enviar um coment√°rio, que √© exibido jundo ao resultado da primeira partida.',
    options:[{
        name: 'coment√°rio',
        type: 'STRING',
        required: false,
        description: 'Coment√°rio opcional (impresso antes do resultado da jogada)'
    }],
    //Execu√ß√£o do comando
    run: async ({interaction, args})=>{
        //Cria√ß√£o de nova partida
        const jokenpo: Jokenpo = new Jokenpo();
        //Execu√ß√£o da nova partida
        jokenpo.play(interaction, args.getString('coment√°rio'));
    },
});