//Importa√ß√£o de bibliotecas da API
import { Message, MessageActionRow, MessageButton, User } from "discord.js";
//Importa√ß√£o da classe de defini√ß√£o do comando
import { Command } from "../../structures/Command";
//Importa√ß√£o da classe de defini√ß√£o da intera√ß√£o
import { ExtendedInteraction } from "../../typings/Command";
import { ChannelManager } from "./channelManager";
//Importa√ß√£o da classe de gerenciamento de usu√°rios
import { GeGManager } from "./playerManger";

//Mensagem de erro para quantidade errada de dados
const WRONG_DICE: string = 'Vov√¥, s√≥ sei contar de 1 a 3 dados. Ser√° que Loriane conta diferente?';
//Texto para ser trocado no reply
const ROLLING: string = 'Rolando dados...';
//Texto para rolagem de dados sem que o atributo tenha sido definido
const NO_ATTRIBUTE: string = 'Eu n√£o sei seu atributo ainda.';
//Texto para exibi√ß√£o no painel
const PANEL_TEXT: string = 'Rolar quantos dados?';
//Regras do G&G
const RULES: string = "Guaxinins & Gambiarras, uma adapta√ß√£o de Lasers & Sentimentos por Marcelo Guaxinim:" +
"\n\n" +
"**Personagem:**" +
"\n" +
"O jogador escolher√° um atributo de 2 a 5. Saiba que atributos como 2 ou 3 correspondem a personagens bons em intera√ß√µes sociais (s√£o mais inteligentes e tem melhor percep√ß√£o do ambiente), por sua vez personagens com atributos de 4 e 5 tem um porte f√≠sico melhor (assim s√£o melhores em atacar, correr, etc). Todo o resto da cria√ß√£o do personagem (nome, descri√ß√£o, √≠tens) s√£o meramente pontos est√©ticos que n√£o interferem na mec√¢nica, devendo se encaixar a narrativa proposta na mesa em quest√£o." +
"\n\n" +
"**Testes:**" +
"\n" +
"Em uma situa√ß√£o normal uma personagem rola 2 dados de 6 lados para executar seus testes. Caso esteja ferido ou em desvantagem, rola-se 1 dado, j√° em caso de vantagem ou recebendo ajuda de outro jogador rolam-se 3 dados." +
"\n\n" +
"**A√ß√£o Guaxinim:** Quando o personagem quer usar seu condicionamento f√≠sico para agir (atacar, correr, escalar, etc). Para que tenha sucesso o jogador precisa tirar seu atributo ou um valor MENOR em pelo menos um dado." +
"\n\n" +
"**A√ß√£o Gambiarra:** Quando o personagem quer usar suas capacidades psico-sociais e intelectuais para agir (perceber, decifrar, convencer, etc). Para que tenha sucesso o jogador precisa tirar seu atributo ou um valor MAIOR em pelo menos um dado." +
"\n\n" +
"Caso o jogador tire exatamente o valor do seu atributo no dado, isso configura acerto cr√≠tico, dando ao jogador uma vantagem ou benef√≠cio em sua a√ß√£o ou contando como dois acertos." +
"\n\n" +
"**Pontos de vida:**" +
"\n" +
"Cada personagem tem 3 pontos de vida. Esses pontos se perdem ao ser atacados por inimigos ou em caso de falhas durante testes com risco de se ferir." +
"\n" +
"Para recuperar basta ter uma justificativa narrativa como cuidados m√©dicos num hospital ou uma noite de sono numa estalagem.";


//Emoje para bot√µes no painel (IN√çCIO)
const DICE: Array<string> = [
    '1Ô∏è‚É£',
    '2Ô∏è‚É£',
    '3Ô∏è‚É£'
];
const RACCOON: string = 'ü¶ù';
//Emoje para bot√µes no painel (FIM)

/**
 * Classe para realiza√ß√£o de rolagens de dados para o GeG
 */
class GeG{
    //Intera√ß√£o a ser respondida
    private interaction: ExtendedInteraction;
    //Gerenciador de jogadores
    private gegManager: GeGManager;
    //Jogador que clicou no bot√£o do painel
    private currentUser: User;
    //Gerenciado de intera√ß√µes de canais
    private channelManager: ChannelManager;

    /**
     * Construtor
     * @constructor
     * @param interaction Intera√ß√£o a ser respondida
     * @param gegManager Singleton do gerenciador de jogadores
     */
    constructor(interaction: ExtendedInteraction){
        this.interaction = interaction;
        //Recupera√ß√£o do singleton de gerenciamento de jogadores
        this.gegManager = GeGManager.getGeGManager();
        //Recupera√ß√£o do singleton de gerenciamento de canais
        this.channelManager = ChannelManager.getChannelManager();
    }

    /**
     * Exibe o painel do G&G
     * @param comment Coment√°rio opcional a ser exibido junto a primeira rolagem de dados
     */
    public async showPanel(comment?: string){
        //Defini√ß√£o do painel
        const row = new MessageActionRow()
            .addComponents(
                new MessageButton()
                    .setCustomId('1')
                    .setEmoji(DICE[0])
                    .setStyle('SECONDARY'),
                new MessageButton()
                    .setCustomId('2')
                    .setEmoji(DICE[1])
                    .setStyle('SECONDARY'),
                new MessageButton()
                    .setCustomId('3')
                    .setEmoji(DICE[2])
                    .setStyle('SECONDARY'),
                new MessageButton()
                    .setCustomId('0')
                    .setEmoji(RACCOON)
                    .setStyle('SECONDARY')
            );
        //Exibi√ß√£o do painel
        this.interaction.channel.send({content: PANEL_TEXT, components: [row]})
            .then( async msg => {

                //Recupera√ß√£o de informa√ß√µes de algum painel de mesmo tipo ainda existente
                const interaction: Message = this.channelManager.getChannelInteraction(this.interaction.channelId);
                //Quando um painel for exibido, o anterior deve ser exclu√≠do
                if( interaction ) {
                    await interaction.delete();
                }
                //O canal √© atualizado, para dizer que o painel ativo √© o que acabou de ser criado.
                this.channelManager.setChannelInteraction(this.interaction.channelId, msg);
            })
            .catch(  
                console.error
        );

        
        //Fun√ß√£o de filtragem de usu√°rios.
        //OBSERVA√á√ÉO: N√£o haver√° uma filtragem propriamente dita, mas sim a captura de que usu√°rio est√° interagindo com o painel.
        const filter = (finteraction) => {
            //Recupera√ß√£o de que usu√°rio est√° interagindo agora com o painel
            this.currentUser = finteraction.user;

            //Impress√£o de debug
            if(process.env.environment==='debug'){
                const LINE: string = '---------------------';
                console.log(LINE);
                console.log('Fun√ß√£o: filter');
                console.log(`currentUser:${this.currentUser}`);
                console.log(`interactionUser:${this.interaction.user.id}`);
                console.log(LINE);
            }

            //Pode haver v√°rios coletores simultaneamente no canal, ent√£o √© necess√°rio fazder a filtragem se
            //a intera√ß√£o que est√° atuando √© a mesma intera√ß√£o que deu origem a esse painel
            return finteraction.message == this.channelManager.getChannelInteraction(finteraction.channelId);
        };

        
        //Defini√ß√£o do coletor de intera√ß√µes com o painel
        const collector = this.interaction.channel.createMessageComponentCollector({
            filter,
            max: 1
        });
        
        
        //Defini√ß√£o de envento para captura de intera√ß√£o com os bot√µes no painel
        collector.on('end', async ButtonInteraction=>{
            
            ButtonInteraction.first().deferUpdate();

            //Caso se tenha apertado o bot√£o do guaxinim, deve-se imprimir a ajuda
            if (ButtonInteraction.first().customId=='0'){
                this.interaction.channel.send({content: RULES});
            }else{
                //Caso contr√°rio, deve-se fazer a rolagem de dados
                if(!this.rollDice(parseInt(ButtonInteraction.first().customId),comment)){
                    const interaction: Message = this.channelManager.getChannelInteraction(this.interaction.channelId);
                    //Quando um painel for exibido, o anterior deve ser exclu√≠do
                    if( interaction ) {
                        await interaction.delete();
                    }
                    return;
                };
                //Ap√≥s o processamento da intera√ß√£o, a informa√ß√£o do usu√°rio atual deve ser descartada
                this.currentUser = undefined;
            }

            //Impress√£o de debug
            if(process.env.environment==='debug'){
                const LINE: string = '---------------------';
                console.log(LINE);
                console.log('FUn√ß√£o: evento on end');
                console.log(`currentUser:${this.currentUser}`);
                console.log(`interactionUser:${this.interaction.user.id}`);
                console.log(LINE);
            }

            //Exibi√ß√£o de novo painel
            this.showPanel(comment);
        });

    }

    /**
     * Realiza uma rolagem de dados
     * @param dice Quantidade de dados a ser rolada
     * @param comment Coment√°rio opcional a ser exibido junto a rolagem de dados
     */
    public rollDice(dice: number, comment?: string): boolean{
        //IMpress√£o de debug
        if(process.env.environment==='debug'){
            const LINE: string = '---------------------';
            console.log(LINE);
            console.log('FUn√ß√£o: rollDice');
            console.log(`currentUser:${this.currentUser}`);
            console.log(`interactionUser:${this.interaction.user.id}`);
            console.log(LINE);
        }
        //Valida√ß√£o da quantidade de dados
        if(dice<1 || dice>3){
            this.interaction.editReply({content: WRONG_DICE});
        }
        //Rolagem dos dados
        const diceRolled = this.gegManager.play(this.interaction.user.id, dice);
        //Valida√ß√£o se quem fez a rolagem j√° tinha definido atributo
        if(!diceRolled){
            //Reply
            this.interaction.editReply({content: '.'});
            //Impress√£o de mensagem de erro
            this.interaction.channel.send({content: `${(this.currentUser)?(this.currentUser):(this.interaction.user)}! ${NO_ATTRIBUTE}`});

            return false;
        }

        //Reply
        this.interaction.editReply({content: (comment)?(comment):(ROLLING)});

        //Exibi√ß√£o do resultado
        this.interaction.channel.send({content: `${(this.currentUser)?(this.currentUser):(this.interaction.user)}, voc√™ rolou: [${diceRolled}]`});
        return true;
    }
}


/**
 * Objeto com comando de rolagem de dados
 */
 export default new Command({
    //Texto de identifica√ß√£o do comando (no caso ser√° /geg)
    name: 'geg',
    //Descri√ß√£o do comando
    description: 'Rolagem de dados para Guaxinins & Gambiarras',
    //Ajuda
    help: '*COMANDO PARA GUAXININS & GAMBIARRAS*\n**/geg**: exibe o painel de intera√ß√£o para rolagem de dados e ajuda\nou\n'+
        '**/geg n√∫mero**: rola o n√∫mero de dados solicitado (entre 1 e 3)',
    //Argumento
    options: [
        {
            name: 'dados',
            type: 'INTEGER',
            required: false,
            description: 'Quantidade de dados a serem rolados',
            choices:[
                {
                    value: 1,
                    name: '1'
                },
                {
                    value: 2,
                    name: '2'
                },
                {
                    value: 3,
                    name: '3'
                }
            ],
            maxValue: 3,
            minValue: 1
        },
        {
            name: 'coment√°rio',
            type: 'STRING',
            required: false,
            description: 'Coment√°rio opcional a ser exbido junto a primeira rolagem de dados.'
        }
    ],
    
    //Chamada de execu√ß√£o do comando
    run: async ({interaction, args})=>{
        //Cria√ß√£o do objeto para lidar com a(s) rolgem(ns)
        const geg: GeG = new GeG(interaction);
        //Verifica√ß√£o se foi passado o argumento relativo a quantidade de dados
        if(args.getInteger('dados')){
            //Rollagem de dados a partir dos argumentos do comando
            geg.rollDice(args.getInteger('dados'), args.getString('coment√°rio'));
        }else{
            //Exibir painel
            geg.showPanel(args.getString('coment√°rio'));
        }
    },
});